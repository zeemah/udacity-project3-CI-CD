version: 2.1

executors: 
  python: 
    docker: 
      - image: python:3.10-alpine3.16
  aws: 
    docker: 
      - image: amazon/aws-cli
  node: 
   docker: 
      - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            export WORKFLOW_ID=<< parameters.workflow_id >> 
            aws cloudformation delete-stack --stack-name udapeople-backend-${WORKFLOW_ID}
            aws s3 rm s3://udapeople-${WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${WORKFLOW_ID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail 
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/sNgEqpA1NSViGZCLbMAKP/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS == 1 )); 
            then
              cd backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end for vulnarabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end for vulnarabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout 
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo ${AWS_DEFAULT_REGION}
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt  
            echo http://${BACKEND_IP}:3030 > backend-url.txt 
            cat backend-url.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend-url.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["05:56:9d:43:0b:d8:ab:4b:1d:24:c2:60:04:a0:65:0d"]
      - attach_workspace:
          at: ~/
      - run: 
          name: Access inventory.txt
          command: cat .circleci/ansible/inventory.txt 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
            pip install awscli
            aws --version
      - run: 
          name: Configure server
          command: | 
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      
  run-migrations:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ~/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: ['backend-build']
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations >> migrations_dump.txt
            ls -al
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/sNgEqpA1NSViGZCLbMAKP/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
 
  deploy-frontend:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl tar gzip
            pip install awscli 
            aws --version
      - run:
          name: Get backend url
          command: |
            export API_URL=$(cat backend-url.txt)
            echo "API_URL = ${API_URL}"
            echo "API_URL=${API_URL}" >> frontend/.env 
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            ls 
            npm install 
            npm run build 
            tar -czvf frontend-artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ~/ 
      - add_ssh_keys:
          fingerprints: ["05:56:9d:43:0b:d8:ab:4b:1d:24:c2:60:04:a0:65:0d"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl rsync openssh
            pip install awscli 
            ansible --version 
      - run: 
          name: Set environment variables 
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            cat backend/.env
      - run:
          name: Deploy backend
          command: |
            cd backend 
            npm i 
            npm run build 
            cd .. 
            tar -C backend -czvf artifact.tar.gz . 
            cd .circleci/ansible
            echo "Verifying contents of the inventory.txt file"
            cat inventory.txt 
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm 
            pip install awscli 
            aws --version
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            # if curl "${API_URL}/api/status" | grep "ok"
            # then 
            #   return 0
            # else 
            #   return 1
            # fi
      - run:
          name: Frontend smoke test.
          command: |
            export FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${FRONTEND_URL}
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then  
              return 0
            else
              return 1
            fi
      # On failure 
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID2="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              aws s3 rm "s3://udapeoplefrontend${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires: 
          - test-frontend 
          - test-backend
          - scan-frontend
          - scan-backend
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]